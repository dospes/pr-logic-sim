Da sich die Änderung durch das Netzwerk von Gattern und Signalen propagieren soll,
muss mit dem Erreichen eines neuen Ausgangssignals den folgenden Objekten mitgeteilt werden,
dass sich das Signal geändert hat. Hierzu muss jedes Objekt wissen, welches Objekt direkt hinter ihm hängt.
Da nur Gatter mitgeteilt bekommen, mit welchem Signal sie verbunden werden, muss im Zuge dieser Mitteilung
die Information an die Signale weitergegeben werden.

Die Propagierung der Werte muss mit und ohne Delay passieren können,
am besten wäre es beide über die gleiche Methode laufen zu lassen, dafür muss ein Argument festgelegt werden.
Wenn ein Event ein Signal ändert, kann dieses Argument mitgegeben werden,
dies wird dann an den Block weitergegeben, der entscheiden kann, ob ein Delay notwendig ist.

Das Einbauen von Delays mittels TimeUnit.SECONDS.sleep() verzögert die gesamte Schaltung. Clock bauen die alles steuert?
Counter für den Setup zerstört eventuell nicht Setup bedingte Durchläufe.
Delay muss auf jeden Fall in Millisekunden und nicht Sekunden sein. Eigentlich handelt es sich eh eher um Zeitabschnitte,
also Ticks. Eine Clock würde dieses Problem lösen, ist aber schwierig zu initialisieren, ohne in die vorgegebenen
Klassen einzugreifen.

Clock im ersten Event bauen, welche gespeichert wird. Alle weiteren Events werden an die Clock weitergegeben.
Die Clock zählt die Zeit und gibt Signale an den richtigen Zeitpunkten weiter. Irgendwie muss der Delay der Nand Gatter
berücksichtigt werden, das kann aber im nachhinein geschehen.

Nand Blöcke können neue Events erstellen, welche in die EventQueue eingeordnet werden. So wird der Delay beachtet
und es muss keine neue Funktion extra für den Delay verwendet werden. Die Events die erstellt werden müssen hierfür
vor das nächste Event, das regulär stattfinden soll.

Es ist sehr wichtig, dass die Events in chronologischer Reihenfolge in der Queue liegen, sonst funktioniert nichts
wie es soll.

Eine Klasse für das Logging der Outputs bzw jeglicher Daten sollte erstellt werden.

Die ersten 20 Durchgänge der Gatter sollten verzögerungsfrei verlaufen, um das Einschwingen zu ermöglichen.
Außerdem muss das Einschwingen abgebrochen werden.

Es wird immer das gleiche Event erzeugt und damit ein OutOfMemory erzeugt. Wo ist die Endlosschleife?

In logging/output ist irgendwo ein Endless Loop

Aufgabe 2 funktionierte nicht, da keine Events nach dem letzten Event geschrieben werden konnten.
Nachdem dies behoben wurde, kommt es zu Endlosschleifen am Ende des Programs, außerdem ändert sich nQ, was nicht sein sollte.
Um dies zu beheben wurde eingeführt, dass ein Signal von einem Nand nur weitergegeben wird, sollte es sich um
ein anderes Signal als das vorherige Handeln. Jetzt kommt es zu falschen Ergebnissen. Eventuell sollte die Entscheidung
zur Weitergabe vom Signal selbst getroffen werden, da dies keine Verzögerungen hat.

Am Zeitpunkt 35 kommt es zu dem Problem, dass sich 2 Signale ändern. Da das Weiterreichen der Werte nicht auf den
Wert wartet, der eigentlich zum gleichen Zeitpunkt geändert werden. Eine mögliche Lösung wäre zu überprüfen,
ob es Events mit dem gleichen Zeitpunkt gibt, und diese alle erst zu ändern, und die Werte dann propagieren zu lassen.
Es ist fraglich, ob es genügt, nur das letzte Signal propagieren zu lassen, da die Gatter hinter den anderen Signalen
nicht unbedingt durch das letzte Signal angeregt werden, die neuen Signalwerte zu laden.
Es ist zu untersuche, welches Signal Priorität erhalten muss, damit das Weiterreichen der Werte korrekt abläuft.
Mögliche Kriterien sind die Anzahl an folgenden Gattern und ob ein folgendes Gatter von einem Signal gespeist wird,
welches auch geändert wird.